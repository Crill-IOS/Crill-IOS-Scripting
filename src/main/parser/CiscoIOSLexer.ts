// Generated from ./src/antlr/CiscoIOS.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CiscoIOSLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly ID = 10;
	public static readonly IPADDR = 11;
	public static readonly INT = 12;
	public static readonly WS = 13;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"ID", "IPADDR", "INT", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'interface'", "'ip'", "'address'", "'no'", "'shutdown'", "'router'", 
		"'ospf'", "'network'", "'area'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "ID", "IPADDR", "INT", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CiscoIOSLexer._LITERAL_NAMES, CiscoIOSLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CiscoIOSLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CiscoIOSLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "CiscoIOS.g4"; }

	// @Override
	public get ruleNames(): string[] { return CiscoIOSLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CiscoIOSLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CiscoIOSLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CiscoIOSLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x0F\x7F\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\v\x06\vY\n\v\r\v\x0E\vZ\x03\f\x06\f^\n\f\r\f" +
		"\x0E\f_\x03\f\x03\f\x06\fd\n\f\r\f\x0E\fe\x03\f\x03\f\x06\fj\n\f\r\f\x0E" +
		"\fk\x03\f\x03\f\x06\fp\n\f\r\f\x0E\fq\x03\r\x06\ru\n\r\r\r\x0E\rv\x03" +
		"\x0E\x06\x0Ez\n\x0E\r\x0E\x0E\x0E{\x03\x0E\x03\x0E\x02\x02\x02\x0F\x03" +
		"\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t" +
		"\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x03\x02" +
		"\x05\x05\x021;C\\c|\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x02\x85\x02\x03" +
		"\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t" +
		"\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03" +
		"\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03" +
		"\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03" +
		"\x02\x02\x02\x03\x1D\x03\x02\x02\x02\x05\'\x03\x02\x02\x02\x07*\x03\x02" +
		"\x02\x02\t2\x03\x02\x02\x02\v5\x03\x02\x02\x02\r>\x03\x02\x02\x02\x0F" +
		"E\x03\x02\x02\x02\x11J\x03\x02\x02\x02\x13R\x03\x02\x02\x02\x15X\x03\x02" +
		"\x02\x02\x17]\x03\x02\x02\x02\x19t\x03\x02\x02\x02\x1By\x03\x02\x02\x02" +
		"\x1D\x1E\x07k\x02\x02\x1E\x1F\x07p\x02\x02\x1F \x07v\x02\x02 !\x07g\x02" +
		"\x02!\"\x07t\x02\x02\"#\x07h\x02\x02#$\x07c\x02\x02$%\x07e\x02\x02%&\x07" +
		"g\x02\x02&\x04\x03\x02\x02\x02\'(\x07k\x02\x02()\x07r\x02\x02)\x06\x03" +
		"\x02\x02\x02*+\x07c\x02\x02+,\x07f\x02\x02,-\x07f\x02\x02-.\x07t\x02\x02" +
		"./\x07g\x02\x02/0\x07u\x02\x0201\x07u\x02\x021\b\x03\x02\x02\x0223\x07" +
		"p\x02\x0234\x07q\x02\x024\n\x03\x02\x02\x0256\x07u\x02\x0267\x07j\x02" +
		"\x0278\x07w\x02\x0289\x07v\x02\x029:\x07f\x02\x02:;\x07q\x02\x02;<\x07" +
		"y\x02\x02<=\x07p\x02\x02=\f\x03\x02\x02\x02>?\x07t\x02\x02?@\x07q\x02" +
		"\x02@A\x07w\x02\x02AB\x07v\x02\x02BC\x07g\x02\x02CD\x07t\x02\x02D\x0E" +
		"\x03\x02\x02\x02EF\x07q\x02\x02FG\x07u\x02\x02GH\x07r\x02\x02HI\x07h\x02" +
		"\x02I\x10\x03\x02\x02\x02JK\x07p\x02\x02KL\x07g\x02\x02LM\x07v\x02\x02" +
		"MN\x07y\x02\x02NO\x07q\x02\x02OP\x07t\x02\x02PQ\x07m\x02\x02Q\x12\x03" +
		"\x02\x02\x02RS\x07c\x02\x02ST\x07t\x02\x02TU\x07g\x02\x02UV\x07c\x02\x02" +
		"V\x14\x03\x02\x02\x02WY\t\x02\x02\x02XW\x03\x02\x02\x02YZ\x03\x02\x02" +
		"\x02ZX\x03\x02\x02\x02Z[\x03\x02\x02\x02[\x16\x03\x02\x02\x02\\^\x05\x19" +
		"\r\x02]\\\x03\x02\x02\x02^_\x03\x02\x02\x02_]\x03\x02\x02\x02_`\x03\x02" +
		"\x02\x02`a\x03\x02\x02\x02ac\x070\x02\x02bd\x05\x19\r\x02cb\x03\x02\x02" +
		"\x02de\x03\x02\x02\x02ec\x03\x02\x02\x02ef\x03\x02\x02\x02fg\x03\x02\x02" +
		"\x02gi\x070\x02\x02hj\x05\x19\r\x02ih\x03\x02\x02\x02jk\x03\x02\x02\x02" +
		"ki\x03\x02\x02\x02kl\x03\x02\x02\x02lm\x03\x02\x02\x02mo\x070\x02\x02" +
		"np\x05\x19\r\x02on\x03\x02\x02\x02pq\x03\x02\x02\x02qo\x03\x02\x02\x02" +
		"qr\x03\x02\x02\x02r\x18\x03\x02\x02\x02su\t\x03\x02\x02ts\x03\x02\x02" +
		"\x02uv\x03\x02\x02\x02vt\x03\x02\x02\x02vw\x03\x02\x02\x02w\x1A\x03\x02" +
		"\x02\x02xz\t\x04\x02\x02yx\x03\x02\x02\x02z{\x03\x02\x02\x02{y\x03\x02" +
		"\x02\x02{|\x03\x02\x02\x02|}\x03\x02\x02\x02}~\b\x0E\x02\x02~\x1C\x03" +
		"\x02\x02\x02\n\x02Z_ekqv{\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CiscoIOSLexer.__ATN) {
			CiscoIOSLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CiscoIOSLexer._serializedATN));
		}

		return CiscoIOSLexer.__ATN;
	}

}

