"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated from ./src/antlr/CiscoIOS.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
const antlr4_1 = require("antlr4");
class CiscoIOSLexer extends antlr4_1.Lexer {
    static T__0 = 1;
    static T__1 = 2;
    static T__2 = 3;
    static T__3 = 4;
    static T__4 = 5;
    static T__5 = 6;
    static T__6 = 7;
    static T__7 = 8;
    static T__8 = 9;
    static ID = 10;
    static IPADDR = 11;
    static INT = 12;
    static WS = 13;
    static EOF = antlr4_1.Token.EOF;
    static channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];
    static literalNames = [null, "'interface'",
        "'ip'", "'address'",
        "'no'", "'shutdown'",
        "'router'",
        "'ospf'", "'network'",
        "'area'"];
    static symbolicNames = [null, null,
        null, null,
        null, null,
        null, null,
        null, null,
        "ID", "IPADDR",
        "INT", "WS"];
    static modeNames = ["DEFAULT_MODE",];
    static ruleNames = [
        "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
        "ID", "IPADDR", "INT", "WS",
    ];
    constructor(input) {
        super(input);
        this._interp = new antlr4_1.LexerATNSimulator(this, CiscoIOSLexer._ATN, CiscoIOSLexer.DecisionsToDFA, new antlr4_1.PredictionContextCache());
    }
    get grammarFileName() { return "CiscoIOS.g4"; }
    get literalNames() { return CiscoIOSLexer.literalNames; }
    get symbolicNames() { return CiscoIOSLexer.symbolicNames; }
    get ruleNames() { return CiscoIOSLexer.ruleNames; }
    get serializedATN() { return CiscoIOSLexer._serializedATN; }
    get channelNames() { return CiscoIOSLexer.channelNames; }
    get modeNames() { return CiscoIOSLexer.modeNames; }
    static _serializedATN = [4, 0, 13, 125, 6, -1, 2, 0,
        7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9,
        7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
        0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1,
        4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1,
        7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 4, 9, 87, 8, 9, 11, 9, 12,
        9, 88, 1, 10, 4, 10, 92, 8, 10, 11, 10, 12, 10, 93, 1, 10, 1, 10, 4, 10, 98, 8, 10, 11, 10, 12, 10,
        99, 1, 10, 1, 10, 4, 10, 104, 8, 10, 11, 10, 12, 10, 105, 1, 10, 1, 10, 4, 10, 110, 8, 10, 11, 10,
        12, 10, 111, 1, 11, 4, 11, 115, 8, 11, 11, 11, 12, 11, 116, 1, 12, 4, 12, 120, 8, 12, 11, 12, 12,
        12, 121, 1, 12, 1, 12, 0, 0, 13, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21,
        11, 23, 12, 25, 13, 1, 0, 3, 3, 0, 47, 57, 65, 90, 97, 122, 1, 0, 48, 57, 3, 0, 9, 10, 13, 13, 32,
        32, 131, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11,
        1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0,
        0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 1, 27, 1, 0, 0, 0, 3, 37, 1, 0, 0, 0, 5, 40, 1, 0, 0, 0, 7, 48,
        1, 0, 0, 0, 9, 51, 1, 0, 0, 0, 11, 60, 1, 0, 0, 0, 13, 67, 1, 0, 0, 0, 15, 72, 1, 0, 0, 0, 17, 80, 1,
        0, 0, 0, 19, 86, 1, 0, 0, 0, 21, 91, 1, 0, 0, 0, 23, 114, 1, 0, 0, 0, 25, 119, 1, 0, 0, 0, 27, 28, 5,
        105, 0, 0, 28, 29, 5, 110, 0, 0, 29, 30, 5, 116, 0, 0, 30, 31, 5, 101, 0, 0, 31, 32, 5, 114, 0, 0,
        32, 33, 5, 102, 0, 0, 33, 34, 5, 97, 0, 0, 34, 35, 5, 99, 0, 0, 35, 36, 5, 101, 0, 0, 36, 2, 1, 0,
        0, 0, 37, 38, 5, 105, 0, 0, 38, 39, 5, 112, 0, 0, 39, 4, 1, 0, 0, 0, 40, 41, 5, 97, 0, 0, 41, 42, 5,
        100, 0, 0, 42, 43, 5, 100, 0, 0, 43, 44, 5, 114, 0, 0, 44, 45, 5, 101, 0, 0, 45, 46, 5, 115, 0, 0,
        46, 47, 5, 115, 0, 0, 47, 6, 1, 0, 0, 0, 48, 49, 5, 110, 0, 0, 49, 50, 5, 111, 0, 0, 50, 8, 1, 0, 0,
        0, 51, 52, 5, 115, 0, 0, 52, 53, 5, 104, 0, 0, 53, 54, 5, 117, 0, 0, 54, 55, 5, 116, 0, 0, 55, 56,
        5, 100, 0, 0, 56, 57, 5, 111, 0, 0, 57, 58, 5, 119, 0, 0, 58, 59, 5, 110, 0, 0, 59, 10, 1, 0, 0, 0,
        60, 61, 5, 114, 0, 0, 61, 62, 5, 111, 0, 0, 62, 63, 5, 117, 0, 0, 63, 64, 5, 116, 0, 0, 64, 65, 5,
        101, 0, 0, 65, 66, 5, 114, 0, 0, 66, 12, 1, 0, 0, 0, 67, 68, 5, 111, 0, 0, 68, 69, 5, 115, 0, 0, 69,
        70, 5, 112, 0, 0, 70, 71, 5, 102, 0, 0, 71, 14, 1, 0, 0, 0, 72, 73, 5, 110, 0, 0, 73, 74, 5, 101,
        0, 0, 74, 75, 5, 116, 0, 0, 75, 76, 5, 119, 0, 0, 76, 77, 5, 111, 0, 0, 77, 78, 5, 114, 0, 0, 78,
        79, 5, 107, 0, 0, 79, 16, 1, 0, 0, 0, 80, 81, 5, 97, 0, 0, 81, 82, 5, 114, 0, 0, 82, 83, 5, 101, 0,
        0, 83, 84, 5, 97, 0, 0, 84, 18, 1, 0, 0, 0, 85, 87, 7, 0, 0, 0, 86, 85, 1, 0, 0, 0, 87, 88, 1, 0, 0,
        0, 88, 86, 1, 0, 0, 0, 88, 89, 1, 0, 0, 0, 89, 20, 1, 0, 0, 0, 90, 92, 3, 23, 11, 0, 91, 90, 1, 0, 0,
        0, 92, 93, 1, 0, 0, 0, 93, 91, 1, 0, 0, 0, 93, 94, 1, 0, 0, 0, 94, 95, 1, 0, 0, 0, 95, 97, 5, 46, 0,
        0, 96, 98, 3, 23, 11, 0, 97, 96, 1, 0, 0, 0, 98, 99, 1, 0, 0, 0, 99, 97, 1, 0, 0, 0, 99, 100, 1, 0,
        0, 0, 100, 101, 1, 0, 0, 0, 101, 103, 5, 46, 0, 0, 102, 104, 3, 23, 11, 0, 103, 102, 1, 0, 0, 0,
        104, 105, 1, 0, 0, 0, 105, 103, 1, 0, 0, 0, 105, 106, 1, 0, 0, 0, 106, 107, 1, 0, 0, 0, 107, 109,
        5, 46, 0, 0, 108, 110, 3, 23, 11, 0, 109, 108, 1, 0, 0, 0, 110, 111, 1, 0, 0, 0, 111, 109, 1, 0,
        0, 0, 111, 112, 1, 0, 0, 0, 112, 22, 1, 0, 0, 0, 113, 115, 7, 1, 0, 0, 114, 113, 1, 0, 0, 0, 115,
        116, 1, 0, 0, 0, 116, 114, 1, 0, 0, 0, 116, 117, 1, 0, 0, 0, 117, 24, 1, 0, 0, 0, 118, 120, 7, 2,
        0, 0, 119, 118, 1, 0, 0, 0, 120, 121, 1, 0, 0, 0, 121, 119, 1, 0, 0, 0, 121, 122, 1, 0, 0, 0, 122,
        123, 1, 0, 0, 0, 123, 124, 6, 12, 0, 0, 124, 26, 1, 0, 0, 0, 8, 0, 88, 93, 99, 105, 111, 116, 121,
        1, 6, 0, 0];
    static __ATN;
    static get _ATN() {
        if (!CiscoIOSLexer.__ATN) {
            CiscoIOSLexer.__ATN = new antlr4_1.ATNDeserializer().deserialize(CiscoIOSLexer._serializedATN);
        }
        return CiscoIOSLexer.__ATN;
    }
    static DecisionsToDFA = CiscoIOSLexer._ATN.decisionToState.map((ds, index) => new antlr4_1.DFA(ds, index));
}
exports.default = CiscoIOSLexer;
//# sourceMappingURL=CiscoIOSLexer.js.map